name: Download APK after EAS Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # workflow_run:
  #   workflows: ["Build Android APK with Expo"]
  #   types:
  #     - completed

jobs:
  download-apk:
    runs-on: ubuntu-latest
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: |
        eas whoami || eas login --token $EXPO_TOKEN
    # Only run if the build workflow succeeded
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    defaults:
      run:
        working-directory: ./practice-one

    steps:
      # Clone the repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # Set up Node.js and install dependencies
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: practice-one/yarn.lock

      - name: Install dependencies
        working-directory: practice-one
        run: yarn install --immutable --immutable-cache --check-cache

      - name: Install EAS CLI
        run: npm install -g eas-cli

      # Get the most recent finished Android build from the 'main' branch
      - name: Get latest Android build info
        id: get_build
        run: |
          echo "Getting latest build info from EAS..."
          OUTPUT=$(eas build:list --platform android --status finished --limit 1 --json --non-interactive)
          echo "Raw output:"
          echo "$OUTPUT"
          BUILD_ID=$(echo "$OUTPUT" | jq -r '.[0].id')
          echo "buildId=$BUILD_ID" >> $GITHUB_OUTPUT

      - name: Get build details
        id: build_info
        working-directory: ./practice-one
        run: |
          eas build:view --json --id ${{ steps.get_build.outputs.buildId }} > build-info.json
          cat build-info.json

      # Extract the APK URL from the build info JSON
      - name: Extract APK URL
        id: apk_url
        run: |
          APK_URL=$(jq -r '.artifacts.buildUrl' build-info.json)
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT

      # Download the APK using curl
      - name: Download APK
        run: |
          mkdir -p ./build/android
          curl -L ${{ steps.apk_url.outputs.apk_url }} -o ./build/android/myapp.apk

      # Upload the APK as an artifact so it can be accessed from the Actions UI
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: MyApp-APK
          path: ./build/android/myapp.apk
          retention-days: 3
